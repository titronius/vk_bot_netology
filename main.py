from random import randrange

import settings
import json
# from models import User
from vk_interection import VKSession,VkUser
import vk_api
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
# from vk_api.longpoll import VkLongPoll, VkEventType
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.utils import get_random_id


vk_session = vk_api.VkApi(token = settings.bot_token)
vk = vk_session.get_api()
longpoll = VkBotLongPoll(vk_session, group_id=226538050)

vk_group_session = VKSession(settings.bot_token)
vk_user_session = VKSession(settings.bot_token)


CALLBACK_TYPES = ('show_snackbar', 'open_link', 'open_app')
# —Ñ—É–Ω–∫—Ü–∏–∏
def add_user_to_db(vk_id):
    user = VkUser(vk_user_session, vk_id)
    user_info = user.get_user_info()
    print(f"User Info: {user_info}")

#–û–±—Ä–∞–±–æ—Ç—á–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
for event in longpoll.listen():

    if event.type == VkBotEventType.MESSAGE_NEW:
    # check_user = User.check_exist(event.object.message['from_id'])
    # if not check_user:
    # add_user_to_db(event.object.message['from_id'])
        if event.object.message['text'] != "":
            request = event.object.message['text']

            if request == "–ù–∞—á–∞—Ç—å":
                keyboard = VkKeyboard()
                keyboard.add_button(settings.buttons_for_bot[0], color=VkKeyboardColor.SECONDARY)
                keyboard.add_button(settings.buttons_for_bot[1], color=VkKeyboardColor.SECONDARY)
                vk.messages.send(user_id = event.object.message['from_id'], random_id = get_random_id(), keyboard = keyboard.get_keyboard(), message = settings.greeting_msg)
            
            elif request == settings.buttons_for_bot[0]:
                # - –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è,
                # - —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å,
                # - —Ç—Ä–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –≤–∏–¥–µ attachment(https://dev.vk.com/method/messages.send).
                msg = '–ö—Ä–∞—Å–æ—Ç–∫–∞ –ö—Ä–∞—Å–∏–≤–∞—è'
                link = 'https://vk.com/titronius'
                attachment = "photo12908812_457240175,photo12908812_457240168"
                
                keyboard = VkKeyboard(inline = True)
                keyboard.add_openlink_button(label = 'üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å', link = link)
                keyboard.add_line()
                keyboard.add_callback_button(label = '‚ù§Ô∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', color=VkKeyboardColor.SECONDARY, payload = {"type": "add_to_favorite"})
                keyboard.add_callback_button(label = '‚ùå –î–æ–±–∞–≤–∏—Ç—å –≤ —á—Å', color=VkKeyboardColor.SECONDARY, payload = {"type": "add_to_blacklist"})
                keyboard.add_line()
                keyboard.add_callback_button(label = '‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π', color=VkKeyboardColor.SECONDARY, payload = {"type": "next_people"})
                
                vk.messages.send(user_id = event.object.message['from_id'], random_id = get_random_id(), keyboard = keyboard.get_keyboard(), message = msg, attachment = attachment)

            elif request == settings.buttons_for_bot[1]:
                # –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ª—é–¥–µ–π.
                pass


    elif event.type == VkBotEventType.MESSAGE_EDIT:

        if event.object.payload.get('type') in CALLBACK_TYPES:
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä—É —É–∫–∞–∑–∞–Ω–∏—è –∫–∞–∫ –∫–∞–∫—É—é –∏–∑ –∫–Ω–æ–ø–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å. –≠—Ç–æ –∑–∞–ª–æ–∂–µ–Ω–æ –≤ 
            # payload –∫–∞–∂–¥–æ–π callback-–∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –µ–µ —Å–æ–∑–¥–∞–Ω–∏–∏.
            # –ù–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∏–Ω–∞—á–µ: –≤ payload –ø–æ–ª–æ–∂–∏—Ç—å —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ
            # –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∫–Ω–æ–ø–æ–∫, –∞ –∑–¥–µ—Å—å –ø–æ –Ω–∏–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
            # –∫–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞–¥–æ –ø–æ—Å–ª–∞—Ç—å. –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.
            r = vk.messages.sendMessageEventAnswer(
                        event_id=event.object.event_id,
                        user_id=event.object.user_id,
                        peer_id=event.object.peer_id,                                                   
                        event_data=json.dumps(event.object.payload))
        else:
            print('—Ö—É—è–∫')
            