import json
from random import randrange
from pprint import pprint
from pathlib import Path

import vk_api
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.utils import get_random_id

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from dotenv import load_dotenv

from models import create_tables, drop_tables
from vk_interaction import User, VKSession


def get_env_variable(variable_name):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env.

    Args:
        variable_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è.

    Returns:
        str: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    
    Raises:
        ValueError: –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
    """
    env_path = Path('.').joinpath('.env')
    env_text = Path(env_path).read_text()

    for line in env_text.splitlines():
        if line.startswith(variable_name):
            return line.split('=')[1].strip()
    
    raise ValueError(f"{variable_name} –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

class VKBot:
    def __init__(self, vk_session, group_id):
        self.vk_session = vk_session
        self.vk = vk_session.get_api()
        self.longpoll = VkBotLongPoll(vk_session, group_id=group_id)
        self.callback_types = ('show_snackbar', 'open_link', 'open_app')
        
    def send_message(self, user_id, message, keyboard=None, attachment=None):
        self.vk.messages.send(
            user_id=user_id,
            random_id=get_random_id(),
            message=message,
            keyboard=keyboard.get_keyboard() if keyboard else None,
            attachment=attachment
        )
    
    def handle_new_message(self, event):
        request = event.object.message['text']
        user_id = event.object.message['from_id']
        
        if request == "–ù–∞—á–∞—Ç—å":
            keyboard = VkKeyboard()
            keyboard.add_button("–ö–Ω–æ–ø–∫–∞ 1", color=VkKeyboardColor.SECONDARY)
            keyboard.add_button("–ö–Ω–æ–ø–∫–∞ 2", color=VkKeyboardColor.SECONDARY)
            self.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", keyboard)
        elif request == "–ö–Ω–æ–ø–∫–∞ 1":
            self.send_profile(user_id)
        elif request == "–ö–Ω–æ–ø–∫–∞ 2":
            self.send_favorites(user_id)
    
    def send_profile(self, user_id):
        msg = '–ö—Ä–∞—Å–æ—Ç–∫–∞ –ö—Ä–∞—Å–∏–≤–∞—è'
        link = 'https://vk.com/titronius'
        attachment = "photo12908812_457240175,photo12908812_457240168"
        
        keyboard = VkKeyboard(inline=True)
        keyboard.add_openlink_button(label='üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å', link=link)
        keyboard.add_line()
        keyboard.add_callback_button(label='‚ù§Ô∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', color=VkKeyboardColor.SECONDARY, payload={"type": "add_to_favorite"})
        keyboard.add_callback_button(label='‚ùå –î–æ–±–∞–≤–∏—Ç—å –≤ —á—Å', color=VkKeyboardColor.SECONDARY, payload={"type": "add_to_blacklist"})
        keyboard.add_line()
        keyboard.add_callback_button(label='‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π', color=VkKeyboardColor.SECONDARY, payload={"type": "next_people"})
        
        self.send_message(user_id, msg, keyboard, attachment)

    def send_favorites(self, user_id):
        # –õ–æ–≥–∏–∫–∞ –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ª—é–¥–µ–π.
        pass

    def handle_message_edit(self, event):
        if event.object.payload.get('type') in self.callback_types:
            self.vk.messages.sendMessageEventAnswer(
                event_id=event.object.event_id,
                user_id=event.object.user_id,
                peer_id=event.object.peer_id,
                event_data=json.dumps(event.object.payload)
            )
        else:
            print('Unknown callback type')

    def listen(self):
        for event in self.longpoll.listen():
            print(event)
            if event.type == VkBotEventType.MESSAGE_NEW:
                if event.object.message['text'] != "":
                    self.handle_new_message(event)
            elif event.type == VkBotEventType.MESSAGE_EDIT:
                self.handle_message_edit(event)

if __name__ == "__main__":
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
    load_dotenv(dotenv_path=Path('.').joinpath('.env'))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–π VK API –¥–ª—è –≥—Ä—É–ø–ø—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    vk_group_session = VKSession('VK_GROUP_TOKEN')
    vk_user_session = VKSession('VK_USER_TOKEN')

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_uri = get_env_variable('DB_URI')
    engine = create_engine(db_uri)
    create_tables(engine)  # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç

    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VKSession –∏ User –∫–ª–∞—Å—Å–æ–≤
    user_id = 331709599

    user = User(vk_user_session, user_id)
    user_info = user.get_user_info()
    print(f"User Info: {user_info}")

    top_photos = user.get_top_photos()
    print(f"Top Photos: {top_photos}")

    search_params = {
        'sex': 1,
        'city': '–û—Ä–µ–Ω–±—É—Ä–≥',
        'relation': 6,
        'smoking': 0,
        'alcohol': 0
    }

    user_ids = vk_user_session.search_users(search_params)
    print(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_ids)}")
    pprint(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_ids}")



    Session = sessionmaker(bind=engine)
    session = Session()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
    group_id = int(get_env_variable('GROUP_ID'))
    bot = VKBot(vk_group_session.vk_session, group_id=group_id)
    bot.listen()

    session.close()